%{
	#include <iostream>
	#include "output.hpp"
	#include "SymbolsTable.hpp"
	#include "ManageIR.hpp"
	#include "bp.hpp"
	#include <stdlib.h>
	#include <assert.h>
	#include <bits/stdc++.h>
	using namespace std;
	
	#define P(s) cout << s << endl
	#define MISMATCH {output::errorMismatch(yylineno); exit(0);}
	#define NOT_NUMERIC(x) ((x) != "INT" && (x) != "BYTE") 
	#define HANDLE_BINOP(first, second, lval, op) check_numeric(first, second);\
	 										lval = new Node();\
	 										lval->type = get_type_of_binop(first->type, second->type);\
	  										ir.binop(op, &(first->reg_num), &(second->reg_num), first->type, second->type, lval);

	extern int yylex();
	extern int yylineno;
	extern char* yytext;

	void yyerror(const char*);
	void new_var(const string& id, const string& ltype, Node* pNode, const string& rtype);
	void new_formal(const string& id, int offset, const string& type);
	void new_table();
	void new_func(const string& id, const string& retType, vector<string>& argTypes);
	void remove_table();
	void end_of_scope_operations();
	string check_var_return_type(const string& id);
	string check_func_return_type(const string& id);
	void check_numeric(Node* x, Node* y);
	string get_type_of_binop(string x, string y);
	TableEntry* get_entry(const string& id);
	int get_offset(const string& id);

	stack<SymbolsTable*> tables_stack;
	stack<int> offset_stack;

	FunctionDecl current_func;
	stack<string> called_arg_types;
	stack<pair<string, int>> called_exps; // <type of Exp : string, number of register that hols the Exp : int>

	unordered_map<string, TableEntry*> hash_ids;
	unordered_map<string, FuncTypes> hash_funcs;
	stack<bool> in_while;
	stack<bool> in_switch;

	CodeBuffer& cbr = CodeBuffer::instance();
	ManageIR ir;

	vector<pair<int,BranchLabelIndex>> while_list = {};
	vector<pair<int,BranchLabelIndex>> global_next_list = {};

	stack<vector<pair<int,BranchLabelIndex>>> cont_lists_stack = {};
	stack<vector<pair<int,BranchLabelIndex>>> brk_lists_stack = {};


%}

%token VOID 
%token INT 
%token BYTE 
%token B 
%token BOOL 
%left OR 
%left AND 
%token RETURN 
%token WHILE 
%token BREAK 
%token CONTINUE 
%right SWITCH 
%right CASE 
%right DEFAULT 
%token SC 
%token COMMA 
%right COLON 
%token ASSIGN 
%token ID 
%token STRING 
%token ILLEGAL 
%left LPAREN RPAREN LBRACE RBRACE 
%nonassoc IF 
%nonassoc ELSE 
%left TRUE FALSE 
%left NUM 
%left EQUALITY
%nonassoc RELATION
%right NOT
%left ADD SUB
%left MUL DIV

%%

Program : Funcs {}
		;

FuncDecl : RetType MarkerID LPAREN Formals RPAREN MarkerLBRACE Statements RBRACE {
	if (current_func.ret_type == "VOID") {cbr.popCmd();}
	ir.end_func(current_func.ret_type, $7);
	current_func = FunctionDecl();
	end_of_scope_operations();
																	}
		;

MarkerID : ID {
		current_func.id = $1->id;
		};

MarkerLBRACE : LBRACE {
		offset_stack.push(0);
		assert(!tables_stack.empty());
		for (uint i = 0; i < current_func.arg_names.size(); i++) {
				new_formal(current_func.arg_names.at(i), -i-1, current_func.arg_types.at(i)); 
		}
		current_func.arg_types = vector<string>();}
Funcs : {}
		| FuncDecl Funcs {}
		;

RetType : Type { current_func.ret_type = $1->type;}
		| VOID  {current_func.ret_type = "VOID";}
		;
Formals :  FormalsList  { new_func(current_func.id, current_func.ret_type, current_func.arg_types);	}
		| {new_func(current_func.id, current_func.ret_type, current_func.arg_types);}
		 ;
FormalsList : FormalDecl  {}
			| FormalDecl COMMA FormalsList {}
			;
FormalDecl : Type ID  {
		if (current_func.id == $2->id) {
			output::errorDef(yylineno, $2->id);
			exit(0);
		}
		current_func.arg_types.push_back($1->type);
		current_func.arg_names.push_back($2->id);}
				;
Statements : Statement { 
						$$ = new Node();
						$$->next_list = cbr.merge($$->next_list, $1->next_list);
						}
			| Statements M Statement {
				cbr.bpatch($1->next_list, dynamic_cast<M*>($2)->label);
				$$ = new Node();
				$$->next_list = cbr.merge($$->next_list, $3->next_list);
			}
			;
Statement : LBRACE Statements RBRACE {
				end_of_scope_operations();
				ir.goto_next_of_s($$);
				$$->next_list = cbr.merge($$->next_list, $2->next_list);
				}
			| Type ID SC  {

				ir.assign_reg(ir.to_llvm_type($1->type), 0, $2);
				new_var($2->id, $1->type, $2, $1->type);
				ir.goto_next_of_s($$);
				}


			| Type ID ASSIGN Exp SC {
			    cbr.emit("; S->Type ID ASSIGN Exp SC");
                string ltype = $1->type;
                string rtype = $4->type;
                if (ltype != rtype) {
                    if (!(ltype == "INT" && rtype == "BYTE")) MISMATCH
                }
                if (ltype == "BOOL") {
                    $2->reg_num = ir.get_bool(dynamic_cast<BiNode*>($4));
                }
                new_var($2->id, ltype, $2, rtype);
				ir.goto_next_of_s($$);
				}


			| ID ASSIGN Exp SC {  
				string ltype = check_var_return_type($1->id);
				string rtype = $3->type;
				if (ltype != rtype) {
					if (!(ltype == "INT" && rtype == "BYTE")) MISMATCH 
				}
				if (ltype == "BOOL") {
                    $2->reg_num = ir.get_bool(dynamic_cast<BiNode*>($3));
                }
                ir.store_local_var(get_offset($1->id), ltype, $1, rtype);
				ir.goto_next_of_s($$);
				}

			| Call SC {
				ir.goto_next_of_s($$);}
			| RETURN SC {
				if (current_func.ret_type != "VOID") MISMATCH}
				
				// ? goto_next_of_s ?}
			| RETURN Exp SC {
				if (current_func.ret_type == "VOID") MISMATCH
				if (current_func.ret_type != $2->type && !(current_func.ret_type == "INT" && $2->type == "BYTE")) MISMATCH
				if ($2->type == "BOOL") {
					int bool_reg_num = ir.get_bool(dynamic_cast<BiNode*>($2));
					$2->reg_num = bool_reg_num;
				}
				ir.return_exp($2->reg_num, $2->type);
				// ? goto_next_of_s ?
			}
			| IF LPAREN MarkerBoolExp RPAREN M Statement MarkerELSE N M Statement {

				ir.bpatch_if_else_statement($$, $8, dynamic_cast<BiNode*>($3), (dynamic_cast<M*>($5))->label, (dynamic_cast<M*>($9))->label, $6, $10);
				end_of_scope_operations();
				ir.goto_next_of_s($$);
				}
			| IF LPAREN MarkerBoolExp RPAREN M Statement {
				    $$ = new Node();
			        ir.bpatch_if_statement($$, dynamic_cast<BiNode*>($3), (dynamic_cast<M*>($5))->label, $6);
					ir.goto_next_of_s($$);
					end_of_scope_operations();
					}			
			
			| WHILE MarkerWhile LPAREN N M MarkerBoolExp RPAREN M Statement {
				string m1_label =  (dynamic_cast<M*>($5))->label;
				ir.bpatch_while($$, m1_label, dynamic_cast<BiNode*>($6), (dynamic_cast<M*>($8))->label, $9,
				brk_lists_stack.top(), cont_lists_stack.top(), $4);
				cont_lists_stack.pop();
				brk_lists_stack.pop();
				in_while.pop();
				end_of_scope_operations();
				ir.goto_next_of_s($$);
				}
			| BREAK SC {
				if (in_while.empty() && in_switch.empty()) {
					output::errorUnexpectedBreak(yylineno);
					exit(0);
				}
				//ir.goto_specific_list(global_next_list);
				ir.goto_specific_list(brk_lists_stack.top());
			}
			| CONTINUE SC { 
				if (in_while.empty()) {
					output::errorUnexpectedContinue(yylineno);
					exit(0);
				}		
				ir.goto_specific_list(cont_lists_stack.top());
			}
			| SWITCH MarkerSwitch LPAREN MarkerNumericExp N RPAREN LBRACE CaseList RBRACE M {
				ir.emit_switch($$, $4, $5, $8, $10, brk_lists_stack.top());
				in_switch.pop();
				brk_lists_stack.pop();
				end_of_scope_operations();
				ir.goto_next_of_s($$);
			}
			;
M : {
	$$ = new M();};
N : {
	$$ = new Node();
	int loc = cbr.emit("\tbr label @");
	$$->next_list = cbr.makelist(pair<int,BranchLabelIndex>(loc, FIRST));};
MarkerWhile : {
	in_while.push(true);
	cont_lists_stack.push({});
	brk_lists_stack.push({});
 } ;
 
MarkerSwitch : {
	in_switch.push(true);
	brk_lists_stack.push({});
	} ;
MarkerNumericExp : Exp {
	if (NOT_NUMERIC($1->type)) MISMATCH
	} ;
MarkerBoolExp : Exp {
	if ($1->type != "BOOL") MISMATCH};

MarkerELSE : ELSE {end_of_scope_operations();};
Call : ID LPAREN ExpList RPAREN { 
                                const string& type =  check_func_return_type($1->id);
                                if (type == "BOOL") {
                                    $$ = new BiNode();
                                }
                                $$->type = type;
                                $$->reg_num = ir.call_func($1->id, $$->type, called_exps);
                                if (type == "BOOL") {
                                    ir.icmp_bool_var((BiNode*)$$, $$->reg_num);
                                }
	}
		| ID LPAREN RPAREN {
		                        cbr.emit("; Call->ID...");
								const string& type =  check_func_return_type($1->id);
                                if (type == "BOOL") {
                                    $$ = new BiNode();
                                }
                                $$->type = type;
                                $$->reg_num = ir.call_func($1->id, $$->type, called_exps);
                                if (type == "BOOL") {
                                    ir.icmp_bool_var((BiNode*)$$, $$->reg_num);
                                }
							}
		;
		
ExpList : Exp  {
			called_arg_types.push($1->type);
			called_exps.push(pair<string, int>($1->type, $1->reg_num));
			}
		| Exp COMMA ExpList {
			called_arg_types.push($1->type);
			called_exps.push(pair<string, int>($1->type, $1->reg_num));
			}
		;
Type : INT { 
		$$ = new Node();
		$$->type = "INT";
		}
		| BYTE  {
				$$ = new Node();
				$$->type = "BYTE";
				}
		| BOOL  {
				$$ = new Node();
				$$->type = "BOOL";
				}
		;
Exp : 
		LPAREN Exp RPAREN {
			BiNode* p_binode = dynamic_cast<BiNode*>($2);
			if (p_binode) {
				$$ = new BiNode();
				$$->type = "BOOL";
				dynamic_cast<BiNode*>($$)->true_list = p_binode->true_list;
				dynamic_cast<BiNode*>($$)->false_list = p_binode->false_list;
			}
			else {
				$$ = new Node();
				$$->type = $2->type;
				$$->reg_num = $2->reg_num;
			}}
		| Exp MUL Exp {HANDLE_BINOP($1, $3, $$, "MUL")} 
		| Exp DIV Exp {HANDLE_BINOP($1, $3, $$, "DIV")} 
		| Exp ADD Exp {HANDLE_BINOP($1, $3, $$, "ADD")} 
		| Exp SUB Exp {HANDLE_BINOP($1, $3, $$, "SUB")} 
		| Exp RELATION Exp {
			check_numeric($1, $3);
			$$ = new BiNode();
			$$->type = "BOOL";
			ir.relop((BiNode*)$$, &($1->reg_num), &($3->reg_num), $2->type, $1->type, $3->type);

			}
		| Exp EQUALITY Exp {
				check_numeric($1, $3);
				$$ = new BiNode();
				$$->type = "BOOL";
				ir.relop((BiNode*)$$, &($1->reg_num), &($3->reg_num), $2->type, $1->type, $3->type);
				}
		| Exp AND M Exp {if ($1->type != "BOOL" || $4->type != "BOOL") MISMATCH
				$$ = new BiNode();
				dynamic_cast<BiNode*>($$)->type = "BOOL";
				cbr.bpatch(dynamic_cast<BiNode*>($1)->true_list, dynamic_cast<M*>($3)->label);
				dynamic_cast<BiNode*>($$)->true_list = dynamic_cast<BiNode*>($4)->true_list;
				dynamic_cast<BiNode*>($$)->false_list = cbr.merge(dynamic_cast<BiNode*>($1)->false_list, dynamic_cast<BiNode*>($4)->false_list);
				}
		| Exp OR M Exp {
				if ($1->type != "BOOL" || $4->type != "BOOL") MISMATCH

				$$ = new BiNode();
				dynamic_cast<BiNode*>($$)->type = "BOOL";
				cbr.bpatch(dynamic_cast<BiNode*>($1)->false_list, dynamic_cast<M*>($3)->label);
				dynamic_cast<BiNode*>($$)->true_list = cbr.merge(dynamic_cast<BiNode*>($1)->true_list, dynamic_cast<BiNode*>($4)->true_list);
				dynamic_cast<BiNode*>($$)->false_list = dynamic_cast<BiNode*>($4)->false_list;

		}
		| NUM {
				//$$ = new Node();
				$$->type = "INT";
				ir.assign_reg("i32", $$->value, $$);
				}
		| ID { 
			const string& ty = check_var_return_type($1->id);
			if (ty == "BOOL") 
				$$ = new BiNode();
			else
				$$ = new Node();
			
			$$->type = ty;
			ir.load_local_var(get_entry($1->id)->offset, $$->type, $$);
			if (ty == "BOOL") 
				ir.icmp_bool_var((BiNode*)$$, $$->reg_num);
		 }
		| Call {
            cbr.emit("; Exp->Call");
			if ($1->type == "BOOL") {
				$$ = new BiNode();
				dynamic_cast<BiNode*>($$)->true_list = dynamic_cast<BiNode*>($1)->true_list;
				dynamic_cast<BiNode*>($$)->false_list = dynamic_cast<BiNode*>($1)->false_list;
			}
			else {
				$$ = new Node();
			}
			$$->next_list = $1->next_list;
			$$->reg_num = $1->reg_num;
			$$->type = $1->type; }
		| NUM B {
			if ($1->value > 255) {
				output::errorByteTooLarge(yylineno, to_string($1->value));
				exit(0);
			} 
			$$->type = "BYTE";
			ir.assign_reg("i8", $$->value, $$);
			}
		| STRING {
				$$->type = "STRING";
				ir.push_string_to_emitGlobal($$->id, $$->type);
				ir.assign_reg("i8", $$->value, $$);
				}
		| TRUE { 
				$$ = new BiNode();
				$$->type = "BOOL";
				$$->value = 1;
				int loc = cbr.emit("\tbr label @");
    			dynamic_cast<BiNode*>($$)->true_list = cbr.makelist({loc, FIRST});
				}
		| FALSE {$$ = new BiNode();
				$$->type = "BOOL";
				$$->value = 0;
				int loc = cbr.emit("\tbr label @");
				dynamic_cast<BiNode*>($$)->false_list = cbr.makelist({loc, FIRST});
				
				}
		| NOT Exp {
				if ($2->type != "BOOL") MISMATCH
				$$ = new BiNode();
				$$->type = "BOOL";
				dynamic_cast<BiNode*>($$)->true_list = dynamic_cast<BiNode*>($2)->false_list;
				dynamic_cast<BiNode*>($$)->false_list = dynamic_cast<BiNode*>($2)->true_list;
		}
		;

CaseDecl : CASE NUM COLON M Statements {
	ir.dbg_list($5);
	string quad = dynamic_cast<M*>($4)->label;
	$$ = new C();
	dynamic_cast<C*>($$)->quad = quad;
	dynamic_cast<C*>($$)->value = $2->value;
	dynamic_cast<C*>($$)->next_list = $5->next_list;
	
}
		;

CaseList : CaseDecl CaseList {
			$$ = new CL();
			ir.cl_c_cl_rule(dynamic_cast<CL*>($$), $1, dynamic_cast<CL*>($2));
			}
		| CaseDecl {
		    $$ = new CL();
			ir.cl_c_rule(dynamic_cast<CL*>($$), $1);
			
		}
		| DEFAULT COLON M Statements {
			string quad = dynamic_cast<M*>($3)->label;
			$$ = new CL();
			dynamic_cast<CL*>($$)->quad_list.push(quad);
			dynamic_cast<CL*>($$)->default_label = quad;
			dynamic_cast<CL*>($$)->next_list = $4->next_list;
		}
		;

%%

void yyerror(const char* c) {
	if (string(c) == "syntax error")
		output::errorSyn(yylineno);
	else
		output::errorLex(yylineno); 
	exit(0);
}

void check_numeric(Node* x, Node* y) {
	if (NOT_NUMERIC(x->type) || NOT_NUMERIC(y->type)) MISMATCH
}

TableEntry* get_entry(const string& id) {
	return hash_ids.find(id)->second;
}

int get_offset(const string& id) {
    return get_entry(id)->offset;
}

string get_type_of_binop(string x, string y) {
	if (x == "INT" || y == "INT") return "INT";
	return "BYTE";
}

string check_var_return_type(const string& id) {
	if (hash_ids.find(id) == hash_ids.end() || hash_funcs.find(id) != hash_funcs.end()) {
		output::errorUndef(yylineno, id);
		exit(0);
	}
	return hash_ids[id]->type;
}

string check_func_return_type(const string& id) {
	// 1. Checks that identifier was defined.
	// 2. Checks that the identifier is a function.
	if (hash_ids.find(id) == hash_ids.end() || hash_funcs.find(id) == hash_funcs.end()) {
		output::errorUndefFunc(yylineno, id);
		exit(0);
	}
	vector<string> exp_func_args = hash_funcs[id].arg_types;
	if (exp_func_args.size() != called_arg_types.size()) {
		output::errorPrototypeMismatch(yylineno, id, exp_func_args);
		exit(0);
	}
	for (uint i = 0; i < exp_func_args.size(); i++) {
		string exp_type = exp_func_args.at(i);
		string called_type = called_arg_types.top();
		called_arg_types.pop();
		if (exp_type != called_type) {
			if (!(exp_type == "INT" && called_type == "BYTE")) {

				output::errorPrototypeMismatch(yylineno, id, exp_func_args);
				exit(0);
			}
		}
	}
	called_arg_types = stack<string>();
	return hash_funcs[id].ret_type;
}

static void check_id_def(const string& id) {
	if (hash_ids.find(id) != hash_ids.end()) {
			output::errorDef(yylineno, id);
			exit(0);
	}
}

static void add_id_to_ids(const string& id, TableEntry* p_entry) {
	hash_ids[id] = p_entry;
}

static void add_func_to_hash(const string& id, const string& ret_type, vector<string>& arg_types) {
		FuncTypes f(ret_type, arg_types);
		hash_funcs[id] = f;
}

void new_formal(const string& id, int offset, const string& type) {
	check_id_def(id);
	TableEntry* p_entry = tables_stack.top()->insert(id, offset, type);
	add_id_to_ids(id, p_entry);
}

void new_var(const string& id, const string& ltype, Node* pNode, const string& rtype) {
	check_id_def(id);
	TableEntry* p_entry = tables_stack.top()->insert(id, offset_stack.top(), ltype);
	ir.store_local_var(offset_stack.top(), ltype, pNode, rtype);
	offset_stack.top()++;
	add_id_to_ids(id, p_entry);
}

void new_func(const string& id, const string& ret_type, vector<string>& arg_types) {
	check_id_def(id);
	add_id_to_ids(id, nullptr);
	add_func_to_hash(id, ret_type, arg_types);
	tables_stack.top()->insert(id, 0, output::makeFunctionType(ret_type, arg_types));
	ir.def_func(id, ret_type, arg_types);
}

void new_table() {
		SymbolsTable* parent;
		if (!tables_stack.empty())
				parent = tables_stack.top();
		else
				parent = nullptr;
		SymbolsTable* symbol_table = new SymbolsTable(parent);
		tables_stack.push(symbol_table);
		assert(!offset_stack.empty());
		offset_stack.push(offset_stack.top());
}

void remove_table() {
		if (tables_stack.empty()) {
				cout << "Tables Stack is empty!" << endl;
				return;
		}
		auto ptr = tables_stack.top();
		for (auto entry : ptr->entries) {
				hash_ids.erase(entry->id);
				delete entry;
		}
		tables_stack.pop();
		delete ptr;
}

void end_of_scope_operations() {
		// output::endScope();
		// tables_stack.top()->print_ids();
		remove_table();
		if (!offset_stack.empty()) {
				offset_stack.pop();
		}
}

int main() {
		offset_stack.push(0);
		new_table();
		vector<string> print_args = {"STRING"};
		new_func("print", "VOID", print_args);
		vector<string> printi_args = {"INT"};
		new_func("printi", "VOID", printi_args);
		yyparse();

		ir.emit_print_functions();
		SymbolsTable* global_symbol_table = tables_stack.top();
		bool found = false;
		for (TableEntry* entry : global_symbol_table->entries) {
			if (entry->id == "main" && entry->type == "()->VOID")
				found = true;
		}
		if (not found) {
			output::errorMainMissing();
			exit(0);
		}
		end_of_scope_operations();
		
		cbr.printCodeBuffer();

}

