define void @foo(i1, i1) {
	%st_ptr = alloca i32, i32 50
	br label %label_3
label_3:
	%t0 = add i32 3, 0
; ExpList : Exp
; Call : ID LPAREN ExpList RPAREN
	call void @printi(i32%t0)
	br label %label_10
	br label %label_10
label_10:
	ret void
}

define void @main() {
	%st_ptr = alloca i32, i32 50
	%t2 = add i32 3, 0
; S->Type ID ASSIGN Exp SC
	%t3 = getelementptr i32, i32* %st_ptr, i32 0
	store i32 %t2, i32* %t3
	br label %label_21
label_21:
	%t4 = add i32 3, 0
; S->Type ID ASSIGN Exp SC
	%t5 = getelementptr i32, i32* %st_ptr, i32 1
	store i32 %t4, i32* %t5
	br label %label_27
label_27:
	%t6 = add i32 5, 0
	%t7 = add i32 10, 0
; Exp: Exp RELATION Exp
	%t8 = icmp slt i32 %t6, %t7
	br i1 %t8, label %label_48, label %label_50
	%t9 = add i32 2, 0
	%t10 = add i32 3, 0
; Exp: Exp RELATION Exp
	%t11 = icmp slt i32 %t9, %t10
	br i1 %t11, label %label_40, label %label_42
; ExpList : Exp
	; Getting Bool Using Phi
label_40:
	br label %label_44
label_42:
	br label %label_44
label_44:
	%t12 = phi i1 [1, %label_40], [0, %label_42]
; ExpList : Exp COMMA ExpList 
	; Getting Bool Using Phi
label_48:
	br label %label_52
label_50:
	br label %label_52
label_52:
	%t13 = phi i1 [1, %label_48], [0, %label_50]
; Call : ID LPAREN ExpList RPAREN
	call void @foo(i1%t13, i1%t12)
	br label %label_57
label_57:
	ret void
}

declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"

define void @printi(i32) {
	%spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
	call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
	ret void
}

define void @print(i8*) {
	%spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
	call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
	ret void
}

